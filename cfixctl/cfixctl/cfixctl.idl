import "oaidl.idl";
import "ocidl.idl";

// 
//
//
//
//
//
//
//
//
//
//
//
//
//
//57f93e52-d44f-11dd-99e2-0016d3b98f9b
//57f93e53-d44f-11dd-99e2-0016d3b98f9b
//
//


[
	uuid( 57f93e5a-d44f-11dd-99e2-0016d3b98f9b ),
	helpstring( "Cfix Control Library" ),
	version( 1.0 )	// N.B. Also update self-registration code.
]
library Cfixctl
{
	interface ICfixTestItem;
	interface ICfixTestContainer;
	interface ICfixTestModule;
	interface ICfixEventSink;

	typedef 
	[
		uuid( 57f93e5d-d44f-11dd-99e2-0016d3b98f9b ), 
		v1_enum,
		version( 1.0 )
	]
	enum CfixTestModuleType {
		CfixTestModuleTypeUser		= 0,
		CfixTestModuleTypeKernel	= 1,
		CfixTestModuleTypeMax		= 1
	} CfixTestModuleType;

	typedef 
	[
		uuid( 57f93e5c-d44f-11dd-99e2-0016d3b98f9b ), 
		v1_enum,
		version( 1.0 )
	]
	enum CfixTestModuleArch {
		CfixTestModuleArchI386		= 0,
		CfixTestModuleArchAmd64		= 1,
		CfixTestModuleArchMax		= 1
	} CfixTestModuleArch;

	[
	  object,
	  uuid( 57f93e50-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixSearchModulesCallback : IUnknown 
	{
		HRESULT EnterDirectory(
			[in] BSTR Path
			);

		HRESULT FoundModule(
			[in] BSTR Path,
			[in] CfixTestModuleType Type,
			[in] CfixTestModuleArch Arch
			);

		HRESULT LeaveDirectory(
			[in] BSTR Path
			);
	}

	const ULONG CFIXCTL_SEARCH_FLAG_RECURSIVE = 1;

	[
	  object,
	  uuid( 57f93e40-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixHost : IUnknown 
	{
		/*++
			Method Description:
				Load a test module from the given file. The architecture
				of the module must match the architecture of the
				current process.

			Arguments:
				Path		- Path to module.
				Module		- Result.
		--*/
		HRESULT LoadModule(
			[in] const BSTR Path,
			[out, retval] ICfixTestModule **Module
			);

		/*++
			Method Description:
				Get the architecture of the host process.

			Arguments:
				Arch		- Result.
		--*/
		HRESULT GetArchitecture(
			[out] CfixTestModuleArch *Arch
			);

		/*++
			Method Description:
				Terminate the host and any test runs that may
				currently take place.

				This can lead to teradown/after routines not
				being called properly.
		--*/
		HRESULT Terminate();

		/*++
			Method Description:
				Search for modules.

			Arguments:
				PathFilter	- Path or filter expression, e.g. c:\*.dll.
				Flags		- CFIXCTL_SEARCH_FLAG_*.
				Type		- CfixTestModuleType or -1 to search all.
				Arch		- CfixTestModuleArch or -1 to search all.
				Callback	- Object to receive events.
		--*/
		HRESULT SearchModules(
			[in] const BSTR PathFilter,
			[in] ULONG Flags,
			[in] ULONG Type,
			[in] ULONG Architecture,
			[in] ICfixSearchModulesCallback *Callback
			);
	}

	[
	  object,
	  uuid( 57f93e41-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixAction : IUnknown 
	{
		/*++
			Method Description:
				Start the run (synchonously). At most one run per object
				may be active.
		--*/
		HRESULT Run( 
			[in] ICfixEventSink *Sink
			);

		/*++
			Method Description:
				Stop the run that currently takes place.

			Return Values:
				S_OK on success.
				S_FALSE if no run is active.
				Any failure HRESULT.
		--*/
		HRESULT Stop();
	}

	[
	  object,
	  uuid( 57f93e51-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixMessageResolver : IUnknown 
	{
		/*++
			Method Description:
				Resolve an (error) message code.

			Arguments:
				MessageId			Message id, HRESULT, NTSTATUS or Win32
									error code
				Reserved			Must be 0.
				BufferSizeInChars	Buffer size, in chars. Must include
									space for the null terminator.
				Buffer				Result.
		--*/
		HRESULT ResolveMessage(
			[in] ULONG MessageId,
			[in] ULONG Reserved,
			[out, retval] BSTR* Message
			);
	}

	const ULONG CFIXCTL_AGENT_FLAG_USE_JOB = 1;

	[
	  object,
	  uuid( 57f93e4b-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixAgent : IUnknown 
	{
		/*++
			Method Description:
				Locate the path to the host image for the given
				atchitecture.
		--*/
		HRESULT GetHostPath(
			[in] CfixTestModuleArch Arch,
			[out, retval] BSTR *Path
			);

		/*++
			Method Description:
				Create a new Host object.

			Arguments:
				Arch		- CPU architecture.
				Clsctx		- inproc/local server.
				Flags		- 0 or CFIXCTL_AGENT_FLAG_*.
				Timeout		- Timeout when wariting for process to spawn.
				CurrentDir	- Optional.
		--*/
		HRESULT CreateHost( 
			[in] CfixTestModuleArch Arch,
			[in] DWORD Clsctx,
			[in] ULONG Flags,
			[in] ULONG Timeout,
			[in] BSTR CurrentDirectory,
			[out, retval] ICfixHost** Host
			);

		/*++
			Method Description:
				Registers a host so that it can be obtained
				using WaitForHostConnection.

				For every call to RegisterHost, there must be a call
				made to WaitForHostConnection.
		--*/
		HRESULT RegisterHost(
			[in] DWORD Cookie,
			[in] ICfixHost *Host 
			);

		/*++
			Method Description:
				Wait for a registration. Once the registration is
				available, the corresponding host pointer is returned.
				A registration cnnot be waited for twice.
		--*/
		HRESULT WaitForHostConnection(
			[in] DWORD Cookie,
			[in] ULONG Timeout,
			[out, retval] ICfixHost** Host
			);

		/*++
			Method Description:
				Create message resolver object capable of reslving
				cfix-related and system error codes.
		--*/
		HRESULT CreateMessageResolver(
			[out, retval] ICfixMessageResolver **Resolver
			);
	}

	/*----------------------------------------------------------------------
	 *
	 * Test Object Model.
	 *
	 */

	[
	  object,
	  uuid( 57f93e42-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixTestItem : IUnknown 
	{
		/*++
			Method Description:
				Get the name of the test item.

			Arguments:
				Name		- Result.
		--*/
		HRESULT GetName(
			[out, retval] BSTR *Name
			);

		/*++
			Method Description:
				Create a run object for this test item and all its
				descendant test items.

			Arguments:
				Flags		- CFIX_FIXTURE_EXECUTION_* (optional).
				Reserved	- Must be 0.
				Action		- Result.
		--*/
		HRESULT CreateExecutionAction(
			[in] ULONG SchedulingFlags,
			[in] ULONG Reserved,
			[out, retval] ICfixAction **Action
			);
	}

	[
	  object,
	  uuid( 57f93e58-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixTestContainer : ICfixTestItem 
	{
		HRESULT GetItemCount(
			[out, retval] ULONG *Count
			);

		HRESULT GetItem(
			[in] ULONG Ordinal,
			[out, retval] ICfixTestItem **Item
			);
	}

	[
	  object,
	  uuid( 57f93e5b-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixTestModule : ICfixTestContainer 
	{
		/*++
			Method Description:
				Get the path to the module corresponding to this object.

			Arguments:
				Path		- Result.
		--*/
		HRESULT GetPath(
			[out, retval] BSTR *Path
			);

		/*++
			Method Description:
				Get the type of the test module.

			Arguments:
				Type		- Result.
		--*/
		HRESULT GetType(
			[out] CfixTestModuleType *Type,
			[out] CfixTestModuleArch *Arch
			);
	}

	const ULONG CFIXCTL_EXECUTE_ALL = 0xFFFFFFFF;

	const ULONG CFIXCTL_DISP_FLAG_ALWAYS_BREAK_ON_FAILURE		= 1;
	const ULONG CFIXCTL_DISP_FLAG_LEAVE_EXCEPTIONS_UNHANDLED	= 2;

	[
	  object,
	  uuid( 57f93e59-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixActionFactory : IUnknown
	{
		/*++
			Method Description:
				Create action for module, fixture, or test case.

				N.B. This method is for internal use only.

			Arguments:
				FixtureOrdinal	- Ordinal of fixture or CFIXCTL_EXECUTE_ALL.
				TestCaseOrdinal	- Ordinal of test case or CFIXCTL_EXECUTE_ALL.
				SchedulingFlags	- CFIX_FIXTURE_EXECUTION_* (optional).
				Reserved		- Must be 0.
				Action			- Result.
		--*/
		HRESULT CreateExecutionAction(
			[in] ULONG FixtureOrdinal,
			[in] ULONG TestCaseOrdinal,
			[in] ULONG SchedulingFlags,
			[in] ULONG Reserved,
			[out, retval] ICfixAction **Action
			);
	}

	/*----------------------------------------------------------------------
	 *
	 * Events.
	 *
	 */

	[
	  object,
	  uuid( 57f93e49-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixStackTrace : IUnknown
	{
		HRESULT GetFrameCount(
			[out, retval] ULONG *Count
			);

		HRESULT GetFrame(
			[in] ULONG Index,
			[out] ULONGLONG *Address,
			[out] BSTR *ModuleName,
			[out] BSTR *FunctionName,
			[out] ULONG *Displacement,
			[out] BSTR *SourceFile,
			[out] ULONG *SourceLine 
			);
	}

	//
	// N.B. The definitions must match CFIX_REPORT_DISPOSITION.
	//

	typedef 
	[
		uuid( 57f93e4a-d44f-11dd-99e2-0016d3b98f9b ), 
		v1_enum,
		version( 1.0 )
	]
	enum CFIXCTL_REPORT_DISPOSITION {
		CfixctlDispositionContinue		= 0,
		CfixctlDispositionBreak			= 1,
		CfixctlDispositionBreakAlways	= 2,
		CfixctlDispositionAbort			= 3
	} CFIXCTL_REPORT_DISPOSITION;

	typedef 
	[
		uuid( 57f93e4e-d44f-11dd-99e2-0016d3b98f9b ), 
		v1_enum,
		version( 1.0 )
	]
	enum CFIXCTL_RELATE_OPERATOR {
		CfixctlRelateEquals				= 0,
		CfixctlRelateNotEquals			= 1,
		CfixctlRelateGreaterThan		= 2,
		CfixctlRelateGreaterThanEquals	= 3,
		CfixctlRelateLessThan			= 4,
		CfixctlRelateLessThanEquals		= 5,
	} CFIXCTL_RELATE_OPERATOR;

	[
	  object,
	  uuid( 57f93e46-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixReportEventSink : IUnknown
	{
		HRESULT UnhandledException(
			[in] ULONG ExceptionCode,
			[in] ULONG Reserved,
			[in] ICfixStackTrace *StackTrace,
			[out, retval] CFIXCTL_REPORT_DISPOSITION *Disposition
			);

		HRESULT FailedAssertion(
			[in] const BSTR Expression,
			[in] const BSTR Routine,
			[in] const BSTR File,
			[in] const BSTR Message,
			[in] ULONG Line,
			[in] ULONG LastError,
			[in] ULONG Flags, // NONFATAL
			[in] ULONG Reserved,
			[in] ICfixStackTrace *StackTrace,
			[out, retval] CFIXCTL_REPORT_DISPOSITION *Disposition
			);

		HRESULT FailedRelateAssertion(
			[in] CFIXCTL_RELATE_OPERATOR Operator,
			[in] const VARIANT ExpectedValue,
			[in] const VARIANT ActualValue,
			[in] const BSTR Routine,
			[in] const BSTR File,
			[in] const BSTR Message,
			[in] ULONG Line,
			[in] ULONG LastError,
			[in] ULONG Flags, // NONFATAL, VALUE_IS_STATUS/HRESULT
			[in] ULONG Reserved,
			[in] ICfixStackTrace *StackTrace,
			[out, retval] CFIXCTL_REPORT_DISPOSITION *Disposition
			);

		HRESULT Inconclusive(
			[in] const BSTR Message,
			[in] ULONG Reserved,
			[in] ICfixStackTrace *StackTrace
			);

		HRESULT Log(
			[in] const BSTR Message,
			[in] ULONG Reserved,
			[in] ICfixStackTrace *StackTrace
			);

		HRESULT QueryDefaultFailedAssertionDisposition(
			[out, retval] CFIXCTL_REPORT_DISPOSITION *Disposition
			);

		HRESULT QueryDefaultUnhandledExceptionDisposition(
			[out, retval] CFIXCTL_REPORT_DISPOSITION *Disposition
			);

		HRESULT BeforeChildThreadStart(
			[in] ULONG ThreadId
			);

		HRESULT AfterChildThreadFinish(
			[in] ULONG ThreadId
			);
	}

	[
	  object,
	  uuid( 57f93e47-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixTestCaseEventSink : ICfixReportEventSink
	{
		HRESULT BeforeTestCaseStart();

		HRESULT AfterTestCaseFinish(
			[in] BOOL RanToCompletion
			);
	}

	[
	  object,
	  uuid( 57f93e45-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixFixtureEventSink : ICfixReportEventSink
	{
		HRESULT BeforeFixtureStart();

		HRESULT AfterFixtureFinish(
			[in] BOOL RanToCompletion
			);

		HRESULT GetTestCaseEventSink(
			[in] ULONG TestCaseOrdinal,
			[in] ULONG ThreadId,
			[out, retval] ICfixTestCaseEventSink **Sink
			);
	}

	[
	  object,
	  uuid( 57f93e44-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixProcessEventSink : IUnknown
	{
		HRESULT Notification(
			[in] HRESULT Hr
			);

		HRESULT GetFixtureEventSink(
			[in] ICfixTestModule *Module,
			[in] ULONG FixtureOrdinal,
			[out, retval] ICfixFixtureEventSink **Sink
			);
	}

	[
	  object,
	  uuid( 57f93e48-d44f-11dd-99e2-0016d3b98f9b ),
	  version( 1.0 ),
	  oleautomation
	]
	interface ICfixEventSink : IUnknown
	{
		HRESULT GetProcessEventSink(
			[in] ULONG ProcessId,
			[out, retval] ICfixProcessEventSink **Sink
			);
	}

	[
		uuid( 57f93e43-d44f-11dd-99e2-0016d3b98f9b ),
		noncreatable 
	]
	coclass LocalHost
	{
		interface IUnknown;
		//interface ICfixHost;
	}

	[
		uuid( 57f93e4f-d44f-11dd-99e2-0016d3b98f9b ),
		noncreatable 
	]
	coclass ProcessHost
	{
		interface IUnknown;
		//interface ICfixHost;
	}

	[
		uuid( 57f93e55-d44f-11dd-99e2-0016d3b98f9b ),
		noncreatable 
	]
	coclass TestModule
	{
		interface IUnknown;
		//interface ICfixTestModule;
		//interface ICfixActionFactory;
		//interface ICfixTestContainer;
		//interface IOleItemContainer;
	}

	[
		uuid( 57f93e56-d44f-11dd-99e2-0016d3b98f9b ),
		noncreatable 
	]
	coclass TestFixture
	{
		interface IUnknown;
		//interface ICfixTestItem;
		//interface ICfixTestContainer;
		//interface IOleItemContainer;
	}

	[
		uuid( 57f93e57-d44f-11dd-99e2-0016d3b98f9b ),
		noncreatable 
	]
	coclass TestCase
	{
		interface IUnknown;
		//interface ICfixTestItem;
	}

	[
		uuid( 57f93e54-d44f-11dd-99e2-0016d3b98f9b ),
		noncreatable 
	]
	coclass FixtureExecutionAction
	{
		interface IUnknown;
		//interface ICfixAction;
	}

	[
		uuid( 57f93e4c-d44f-11dd-99e2-0016d3b98f9b )
	]
	coclass LocalAgent
	{
		interface ICfixAgent;
	}

	//[
	//	uuid( 57f93e4d-d44f-11dd-99e2-0016d3b98f9b )
	//]
	//coclass TypeLibWorkaround
	//{
	//	interface ICfixTestModule;
	//	interface ICfixHost;
	//}
}